addpath(['..', filesep, 'scripts'])
addpath(['..', filesep, 'scripts', filesep,'SupFig1_fitting'])

tasks = {'airpuff', 'omission'};
types = {'SFP','SF'}; 

for i = 1:length(tasks)
    for j = 1:length(types)
        param = load(['..', filesep, 'result', filesep , strcat(tasks(i), types(j), '.mat')]);
        if types(j)=='SFP'
            for m = 1:height(param)
                standard = param.ML_Q{m,2};
                alpha_l = [];
                alpha_f = [];
                kappa_r = [];
                kappa_c = [];
                psai = [];
                intlqp = [];
                intlqc = [];
                for t = 1:100
                    lm = param.ML_Q{m,1+t};
                    alpha_l = [alpha_l lm.alpha_l];
                    alpha_f = [alpha_f lm.alpha_f];
                    kappa_r = [kappa_r lm.kappa_r];
                    kappa_c = [kappa_c lm.kappa_c];
                    lambda_e = [lambda_e lm.lambda_e];
                    kappa_cintl = [kappa_c lm.kappa_c];
                    lambda_e = [lambda_e lm.lambda_e];
                end
                standard.alpha_l = median(alpha_l);
                standard.alpha_f = median(alpha_f);
                standard.kappa_r = median(kappa_r);
                standard.kappa_c = median(kappa_c);
                standard.lambda_e = median(lambda_e);
            end
        else
            for m = 1:height(param)
                standard = param.ML_Q{m,2};
                alpha_l = [];
                alpha_f = [];
                kappa_r = [];
                lambda_e = [];
                for t = 1:100
                    lm = param.ML_Q{m,1+t};
                    alpha_l = [alpha_l lm.alpha_l];
                    alpha_f = [alpha_f lm.alpha_f];
                    kappa_r = [kappa_r lm.kappa_r];
                    lambda_e = [lambda_e lm.lambda_e];
                end
                standard.alpha_l = median(alpha_l);
                standard.alpha_f = median(alpha_f);
                standard.kappa_r = median(kappa_r);
                standard.lambda_e = median(lambda_e);
            end
        end
        param.ML_Q = param.ML_Q{:,1:2};
        save(append('..', filesep, 'param', filesep , 'original', filesep , string(tasks(i)), string(types(j))),'ML_Q')
    end
end